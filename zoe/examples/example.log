#Transaction from A to B
>>> from src.deploy_contracts import *
>>> w3 = Web3(EthereumTesterProvider())
>>> manager = deploy_manager(w3)

B creates keys
>>> w3.eth.defaultAccount = w3.eth.accounts[1]
>>> from src.gen_public_key import *
>>> receiver_seed = "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
>>> receiver_secret_key, receiver_public_key,
  receiver_rsa_private_key, receiver_rsa_public_key = gen_keys(receiver_seed)
[gen_keys output]
>>> receiver_rsa_public_key =  receiver_rsa_public_key.exportKey().decode('utf-8')
>>> receiver_rsa_private_key = receiver_rsa_private_key.exportKey().decode('utf-8')

B registers
>>> from zoe import *
>>> register(manager, receiver_public_key, receiver_rsa_public_key)
>>> available_addresses(manager)
[AttributeDict(
{'pk': 74263360584385017317229801338309949172113914099200900327948782255118111814734,
'enc_pk': '-----BEGIN PUBLIC KEY-----\nMII(...)\n-----END PUBLIC KEY-----',
'from': '0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF'}
)]

B checks available commitments
>>> available_commitments(manager, receiver_secret_key,
...   receiver_public_key, receiver_rsa_private_key)
[]


A creates keys
>>> w3.eth.defaultAccount = w3.eth.accounts[0]
>>> sender_seed = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
>>> sender_secret_key, sender_public_key, sender_rsa_private_key,
  sender_rsa_public_key = gen_keys(sender_seed)
[gen_keys output]

A deposits funds x2
>>> w3.eth.getBalance(w3.eth.accounts[0])
999999999999999991592760
>>> w3.eth.getBalance(w3.eth.accounts[1])
999999999999999999937617
>>> w3.eth.getBalance(manager.address)
0
>>>
>>> deposit(manager, 40, sender_public_key, sender_rsa_public_key)
Creating commitment...
Generating zksnark..
Encrypting message...
Depositing the funds
Finished.
HexBytes('0x8b67d7c8b4fd93c7473db536d3bbe91656a4c1e9c45ef5273d0d9244a64475ef')
>>> w3.eth.getBalance(w3.eth.accounts[0])
999995979158149991592760
>>> w3.eth.getBalance(manager.address)
4000000000000000000
>>> deposit(manager, 105, sender_public_key, sender_rsa_public_key)
Creating commitment...
Generating zksnark..
Encrypting message...
Depositing the funds
Finished.
HexBytes('0x51016b29a449feea0a1f3e748096aab49037d824cd54b98a5b22eb96ba0a8b17')
>>> w3.eth.getBalance(w3.eth.accounts[0])
999985459978529991592760
>>> w3.eth.getBalance(manager.address)
14500000000000000000

A checks available commitments

>>> commitments = available_commitments(manager, sender_secret_key,
... sender_public_key, sender_rsa_private_key)
>>> commitments
[{'commit': 47572382565435287350150605051509881331865724106798283718889881622457704404953,
'id': 0,
'pk': 72459489292407856042925030776247562010071776121889813096024679003268149415408,
's': 118624887,
'v': 40},
{'commit': 59032780941480356711234612179556100587848263115025734383758236841186131510910,
'id': 1,
'pk': 72459489292407856042925030776247562010071776121889813096024679003268149415408,
's': 1085632943,
'v': 105}]

A checks available receivers
>>> available_addresses(manager)
[AttributeDict(
{'pk': 74263360584385017317229801338309949172113914099200900327948782255118111814734,
'enc_pk': '-----BEGIN PUBLIC KEY-----\nMII(...)\n-----END PUBLIC KEY-----',
'from': '0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF'}
)]

A transfers some ether
>>> input_secret = commitments[1]['s']
>>> input_value = commitments[1]['v']
>>> input_commitment = commitments[1]['commit']
>>> input_commitment_id = commitments[1]['id']
>>> out_value = 5
>>>
>>> result = transaction(
...     manager,
...     sender_public_key,
...     sender_secret_key,
...     out_value,
...     receiver_public_key,
...     receiver_rsa_public_key,
...     sender_rsa_public_key,
...     input_value,
...     input_commitment,
...     input_secret,
...     input_commitment_id
... )
Computing the witness...
Computing the proof...
Encrypting message...
Encrypting 2nd message...
Transfering the funds...
Finished.

A checks available commitments

>>> commitments = available_commitments(manager, sender_secret_key, sender_public_key, sender_rsa_private_key)
>>> commitments
[{'commit': 47572382565435287350150605051509881331865724106798283718889881622457704404953,
'id': 0,
'pk': 72459489292407856042925030776247562010071776121889813096024679003268149415408,
's': 118624887,
'v': 40},
{'commit': 54729090053421039498761099040266234163601549085232952069211138364905291506282,
'id': 3,
'pk': 72459489292407856042925030776247562010071776121889813096024679003268149415408,
's': 2240806651,
'v': 100}]

Check balances
>>> w3.eth.getBalance(w3.eth.accounts[0])
999985459978529989361500
>>> w3.eth.getBalance(w3.eth.accounts[1])
999999999999999999937617
>>> w3.eth.getBalance(manager.address)
14500000000000000000

B checks available commitments
>>> w3.eth.defaultAccount = w3.eth.accounts[1]
>>> commitments_receiver = available_commitments(manager, receiver_secret_key, receiver_public_key, receiver_rsa_private_key)
>>> commitments_receiver
[{'commit': 113116372011414926182096182554535615300131828377711546798598870799116613886440,
'id': 2,
'pk': 74263360584385017317229801338309949172113914099200900327948782255118111814734,
's': 1331026073,
'v': 5}]
B withdraws some ether
>>> out_value = 3
>>> withdraw(
...     manager,
...     receiver_public_key,
...     receiver_secret_key,
...     receiver_rsa_public_key,
...     out_value,
...     commitments_receiver[0]['v'],
...     commitments_receiver[0]['commit'],
...     commitments_receiver[0]['s'],
...     commitments_receiver[0]['id']
... )
Computing the witness...
Computing the proof...
Encrypting message...
Transfering the funds...
Finished.

B checks available commitments

Check balances
>>> w3.eth.getBalance(w3.eth.accounts[0])
999985459978529989361500
>>> w3.eth.getBalance(w3.eth.accounts[1])
1000000299999999997870761
>>> w3.eth.getBalance(manager.address)
14200000000000000000
