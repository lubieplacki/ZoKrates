import "./../bit_convert_32.code" as bitConvert32
import "./../sha256/sha256.code" as sha256Compress
// i32 value, i256 commitment, i32 id, i32 publicKey
def main(value, commitment, private id, private publicKey):
  // Convert to bits for hash function
  valueBit31, valueBit30, valueBit29, valueBit28, valueBit27, valueBit26, valueBit25, valueBit24, valueBit23, valueBit22, valueBit21, valueBit20, valueBit19, valueBit18, valueBit17, valueBit16, valueBit15, valueBit14, valueBit13, valueBit12, valueBit11, valueBit10, valueBit9, valueBit8, valueBit7, valueBit6, valueBit5, valueBit4, valueBit3, valueBit2, valueBit1, valueBit0 = bitConvert32(value)

  idBit31, idBit30, idBit29, idBit28, idBit27, idBit26, idBit25, idBit24, idBit23, idBit22, idBit21, idBit20, idBit19, idBit18, idBit17, idBit16, idBit15, idBit14, idBit13, idBit12, idBit11, idBit10, idBit9, idBit8, idBit7, idBit6, idBit5, idBit4, idBit3, idBit2, idBit1, idBit0 = bitConvert32(id)

  publicKeyBit31, publicKeyBit30, publicKeyBit29, publicKeyBit28, publicKeyBit27, publicKeyBit26, publicKeyBit25, publicKeyBit24, publicKeyBit23, publicKeyBit22, publicKeyBit21, publicKeyBit20, publicKeyBit19, publicKeyBit18, publicKeyBit17, publicKeyBit16, publicKeyBit15, publicKeyBit14, publicKeyBit13, publicKeyBit12, publicKeyBit11, publicKeyBit10, publicKeyBit9, publicKeyBit8, publicKeyBit7, publicKeyBit6, publicKeyBit5, publicKeyBit4, publicKeyBit3, publicKeyBit2, publicKeyBit1, publicKeyBit0 = bitConvert32(publicKey)

  hashBit255, hashBit254, hashBit253, hashBit252, hashBit251, hashBit250, hashBit249, hashBit248, hashBit247, hashBit246, hashBit245, hashBit244, hashBit243, hashBit242, hashBit241, hashBit240, hashBit239, hashBit238, hashBit237, hashBit236, hashBit235, hashBit234, hashBit233, hashBit232, hashBit231, hashBit230, hashBit229, hashBit228, hashBit227, hashBit226, hashBit225, hashBit224, hashBit223, hashBit222, hashBit221, hashBit220, hashBit219, hashBit218, hashBit217, hashBit216, hashBit215, hashBit214, hashBit213, hashBit212, hashBit211, hashBit210, hashBit209, hashBit208, hashBit207, hashBit206, hashBit205, hashBit204, hashBit203, hashBit202, hashBit201, hashBit200, hashBit199, hashBit198, hashBit197, hashBit196, hashBit195, hashBit194, hashBit193, hashBit192, hashBit191, hashBit190, hashBit189, hashBit188, hashBit187, hashBit186, hashBit185, hashBit184, hashBit183, hashBit182, hashBit181, hashBit180, hashBit179, hashBit178, hashBit177, hashBit176, hashBit175, hashBit174, hashBit173, hashBit172, hashBit171, hashBit170, hashBit169, hashBit168, hashBit167, hashBit166, hashBit165, hashBit164, hashBit163, hashBit162, hashBit161, hashBit160, hashBit159, hashBit158, hashBit157, hashBit156, hashBit155, hashBit154, hashBit153, hashBit152, hashBit151, hashBit150, hashBit149, hashBit148, hashBit147, hashBit146, hashBit145, hashBit144, hashBit143, hashBit142, hashBit141, hashBit140, hashBit139, hashBit138, hashBit137, hashBit136, hashBit135, hashBit134, hashBit133, hashBit132, hashBit131, hashBit130, hashBit129, hashBit128, hashBit127, hashBit126, hashBit125, hashBit124, hashBit123, hashBit122, hashBit121, hashBit120, hashBit119, hashBit118, hashBit117, hashBit116, hashBit115, hashBit114, hashBit113, hashBit112, hashBit111, hashBit110, hashBit109, hashBit108, hashBit107, hashBit106, hashBit105, hashBit104, hashBit103, hashBit102, hashBit101, hashBit100, hashBit99, hashBit98, hashBit97, hashBit96, hashBit95, hashBit94, hashBit93, hashBit92, hashBit91, hashBit90, hashBit89, hashBit88, hashBit87, hashBit86, hashBit85, hashBit84, hashBit83, hashBit82, hashBit81, hashBit80, hashBit79, hashBit78, hashBit77, hashBit76, hashBit75, hashBit74, hashBit73, hashBit72, hashBit71, hashBit70, hashBit69, hashBit68, hashBit67, hashBit66, hashBit65, hashBit64, hashBit63, hashBit62, hashBit61, hashBit60, hashBit59, hashBit58, hashBit57, hashBit56, hashBit55, hashBit54, hashBit53, hashBit52, hashBit51, hashBit50, hashBit49, hashBit48, hashBit47, hashBit46, hashBit45, hashBit44, hashBit43, hashBit42, hashBit41, hashBit40, hashBit39, hashBit38, hashBit37, hashBit36, hashBit35, hashBit34, hashBit33, hashBit32, hashBit31, hashBit30, hashBit29, hashBit28, hashBit27, hashBit26, hashBit25, hashBit24, hashBit23, hashBit22, hashBit21, hashBit20, hashBit19, hashBit18, hashBit17, hashBit16, hashBit15, hashBit14, hashBit13, hashBit12, hashBit11, hashBit10, hashBit9, hashBit8, hashBit7, hashBit6, hashBit5, hashBit4, hashBit3, hashBit2, hashBit1, hashBit0 = sha256Compress(valueBit31, valueBit30, valueBit29, valueBit28, valueBit27, valueBit26, valueBit25, valueBit24, valueBit23, valueBit22, valueBit21, valueBit20, valueBit19, valueBit18, valueBit17, valueBit16, valueBit15, valueBit14, valueBit13, valueBit12, valueBit11, valueBit10, valueBit9, valueBit8, valueBit7, valueBit6, valueBit5, valueBit4, valueBit3, valueBit2, valueBit1, valueBit0, idBit31, idBit30, idBit29, idBit28, idBit27, idBit26, idBit25, idBit24, idBit23, idBit22, idBit21, idBit20, idBit19, idBit18, idBit17, idBit16, idBit15, idBit14, idBit13, idBit12, idBit11, idBit10, idBit9, idBit8, idBit7, idBit6, idBit5, idBit4, idBit3, idBit2, idBit1, idBit0, publicKeyBit31, publicKeyBit30, publicKeyBit29, publicKeyBit28, publicKeyBit27, publicKeyBit26, publicKeyBit25, publicKeyBit24, publicKeyBit23, publicKeyBit22, publicKeyBit21, publicKeyBit20, publicKeyBit19, publicKeyBit18, publicKeyBit17, publicKeyBit16, publicKeyBit15, publicKeyBit14, publicKeyBit13, publicKeyBit12, publicKeyBit11, publicKeyBit10, publicKeyBit9, publicKeyBit8, publicKeyBit7, publicKeyBit6, publicKeyBit5, publicKeyBit4, publicKeyBit3, publicKeyBit2, publicKeyBit1, publicKeyBit0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)


  return 1
